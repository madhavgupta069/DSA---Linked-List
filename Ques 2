#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = NULL;
    }
};

class SinglyLinkedList {
    Node* head;
public:
    SinglyLinkedList() {
        head = NULL;
    }

    
    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        if (head == NULL) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

    
    void display() {
        Node* temp = head;
        if (temp == NULL) {
            cout << "List is empty.\n";
            return;
        }
        while (temp != NULL) {
            cout << temp->data;
            if (temp->next != NULL)
                cout << " -> ";
            temp = temp->next;
        }
        cout << endl;
    }

    
    int countOccurrences(int key) {
        int count = 0;
        Node* temp = head;
        while (temp != NULL) {
            if (temp->data == key)
                count++;
            temp = temp->next;
        }
        return count;
    }

    
    void deleteAllOccurrences(int key) {
        
        while (head != NULL && head->data == key) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }

        Node* current = head;
        while (current != NULL && current->next != NULL) {
            if (current->next->data == key) {
                Node* temp = current->next;
                current->next = current->next->next;
                delete temp;
            } else {
                current = current->next;
            }
        }
    }
};

int main() {
    SinglyLinkedList sll;
    int n, val, key;

    cout << "Enter number of nodes: ";
    cin >> n;
    cout << "Enter node values: ";
    for (int i = 0; i < n; i++) {
        cin >> val;
        sll.insertAtEnd(val);
    }

    cout << "Enter key to count and delete: ";
    cin >> key;

    int count = sll.countOccurrences(key);
    cout << "Count: " << count << endl;

    sll.deleteAllOccurrences(key);
    cout << "Updated Linked List: ";
    sll.display();

    return 0;
}
